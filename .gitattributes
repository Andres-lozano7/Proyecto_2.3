<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Monitor ESP32</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 font-sans p-4">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold text-center mb-4">Monitor de Datos del ESP32</h1>

    <div class="flex justify-center mb-6">
      <button id="connectBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Conectar vía Bluetooth</button>
    </div>
    <p class="text-center mb-4" id="status">Estado: No conectado</p>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <canvas id="chartBPM"></canvas>
        <p id="textBPM" class="text-center mt-2"></p>
      </div>
      <div>
        <canvas id="chartTemp"></canvas>
        <p id="textTemp" class="text-center mt-2"></p>
      </div>
      <div>
        <canvas id="chartEDA"></canvas>
        <p id="textEDA" class="text-center mt-2"></p>
      </div>
      <div>
        <canvas id="chartAccel"></canvas>
        <p id="textAccel" class="text-center mt-2"></p>
      </div>
    </div>
  </div>

  <script>
    const serviceUuid = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';
    const charUuid = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';

    const status = document.getElementById('status');

    const chartData = (label, color) => ({
      labels: [],
      datasets: [{
        label,
        data: [],
        borderColor: color,
        fill: false,
        tension: 0.2
      }]
    });

    const bpmChart = new Chart(document.getElementById('chartBPM'), {
      type: 'line', data: chartData('Ritmo Cardíaco (BPM)', 'red'), options: { scales: { x: { display: false } } }
    });
    const tempChart = new Chart(document.getElementById('chartTemp'), {
      type: 'line', data: chartData('Temperatura (°C)', 'orange'), options: { scales: { x: { display: false } } }
    });
    const edaChart = new Chart(document.getElementById('chartEDA'), {
      type: 'line', data: chartData('EDA (uS)', 'green'), options: { scales: { x: { display: false } } }
    });
    const accelChart = new Chart(document.getElementById('chartAccel'), {
      type: 'line', data: chartData('Aceleración (Roll)', 'blue'), options: { scales: { x: { display: false } } }
    });

    function updateChart(chart, value) {
      const now = new Date().toLocaleTimeString();
      chart.data.labels.push(now);
      chart.data.datasets[0].data.push(value);
      if (chart.data.labels.length > 20) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
      }
      chart.update();
    }

    async function connectBLE() {
      try {
        status.textContent = 'Estado: Buscando dispositivo...';
        const device = await navigator.bluetooth.requestDevice({
          filters: [{ namePrefix: 'Prototipo1' }],
          optionalServices: [serviceUuid]
        });

        const server = await device.gatt.connect();
        const service = await server.getPrimaryService(serviceUuid);
        const characteristic = await service.getCharacteristic(charUuid);

        status.textContent = 'Estado: Conectado';

        characteristic.startNotifications();
        characteristic.addEventListener('characteristicvaluechanged', (event) => {
          const value = new TextDecoder().decode(event.target.value);
          parseData(value);
        });

      } catch (err) {
        status.textContent = 'Estado: Error en conexión';
        console.error(err);
      }
    }

    function parseData(data) {
  try {
    const bpmMatch = data.match(/BPM:(\d+)/);
    const tempMatch = data.match(/Temp:(\d+\.?\d*)C/);
    const edaValue = data.match(/,([0-9\.]+)uS/);
    const rollMatch = data.match(/Roll:([\-\d\.]+)/);

    if (bpmMatch) {
      const bpm = parseInt(bpmMatch[1]);
      document.getElementById('textBPM').textContent = `BPM: ${bpm}`;
      updateChart(bpmChart, bpm);
    }

    if (tempMatch) {
      const temp = parseFloat(tempMatch[1]);
      document.getElementById('textTemp').textContent = `Temperatura: ${temp} °C`;
      updateChart(tempChart, temp);
    }

    if (edaValue) {
      const eda = parseFloat(edaValue[1]);
      document.getElementById('textEDA').textContent = `EDA: ${eda} uS`;
      updateChart(edaChart, eda);
    }

    if (rollMatch) {
      const roll = parseFloat(rollMatch[1]);
      document.getElementById('textAccel').textContent = `Aceleración (Roll): ${roll}`;
      updateChart(accelChart, roll);
    }

  } catch (error) {
    console.warn("Error al procesar datos BLE:", error);
  }
}


    document.getElementById('connectBtn').addEventListener('click', connectBLE);
  </script>
</body>
</html>
